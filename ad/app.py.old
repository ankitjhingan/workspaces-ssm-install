import json
import os
import boto3
from ldap3 import Server, Connection, Tls, NTLM, ALL
from ldap3.extend.microsoft.addMembersToGroups import ad_add_members_to_groups as addUsersInGroups

#secrets = boto3.client('secretsmanager')
#ds = boto3.client('ds')
grouparray=[]
LDAP_USER='sat.com\\mradmin'
LDAP_PASSWORD='Welcome1'
def addtagfunc(ssmclient,miid,tagkey,tagvalue):
   try:
     wstag = ssmclient.add_tags_to_resource(
                ResourceType='ManagedInstance',
                ResourceId= miid,
                Tags=[
                    {
                        'Key': tagkey,
                        'Value': tagvalue
                    },
                ]
                )
     return ('added_Tag')
   except:
       print ('failed adding tag') 


def lambda_handler(event, context):
    region= os.environ['stackregion']
    ldapserv= os.environ['ldapserv']
    ssmclient= boto3.client('ssm', region)
    print(event)
    miid = event["queryStringParameters"]['miid']
    username = event["queryStringParameters"]['username']
    print ('user is', username)
#   response = ds.describe_directories(
#        DirectoryIds= directoryid
#    )
#   ldapserv= (response['DirectoryDescriptions'][0]['DnsIpAddrs'][0])
#   directoryid
    ssmparam = ssmclient.get_parameters(
    Names=[
        'aduser','adpsswd'
    ]
    )
    print('SSM Param is', ssmparam)

    serchstring ="(&(objectclass=user)(sAMAccountName=" + username + "))"
    server = Server(ldapserv, get_info=ALL)
    conn = Connection(server, user=LDAP_USER, password=LDAP_PASSWORD, authentication=NTLM, auto_bind=True)
    conn.search('DC=sat,DC=com',serchstring, attributes=['memberOf'])
    response = json.loads(conn.response_to_json())
    print(response)
    for i in range(len(response['entries'][0]['attributes']['memberOf'])):
        a=response['entries'][0]['attributes']['memberOf'][i].split(",")[0]
        w=a.split('=')
        print(w[1])
        
        outval=addtagfunc(ssmclient,miid,w[1],'yes')
        grouparray.append(w[1])
    print(grouparray)
    if outval != 'added_Tag':
        return {
        "statusCode": 200,
        "body": json.dumps({
            "message": "issue_Adding_tag"
        }),
            }

    else:
        return {
            "statusCode": 200,
            "body": json.dumps({
                "message": "added_tags"
            }),
                }


